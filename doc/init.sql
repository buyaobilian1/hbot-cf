DROP TABLE IF EXISTS users;
create table users (
  id bigint generated by default as identity primary key,
  tg_id bigint unique not null,
  amount numeric(10,2) default 0.00,
  invite_link text,
  created_at text default to_char(timezone('UTC-8'::text, CURRENT_TIMESTAMP), 'YYYY-MM-dd HH24:MI:SS'::text) not null
);

DROP TABLE IF EXISTS orders;
create table orders (
  id bigint generated by default as identity primary key,
  user_id bigint not null,
  tg_name text not null,
  pack int not null,
  boom int not null,
  sub_packs numeric(10,2)[] not null,
  status int not null default 0, --0未完成，1已完成，2已过期
  created_at text default to_char(timezone('UTC-8'::text, CURRENT_TIMESTAMP), 'YYYY-MM-dd HH24:MI:SS'::text) not null
);

DROP TABLE IF EXISTS order_details;
create table order_details (
  id bigint generated by default as identity primary key,
  order_id bigint not null,
  user_id bigint,
  sub_pack numeric(10,2) not null,
  boom boolean not null,
  tg_id bigint,
  tg_name text,
  created_at text default to_char(timezone('UTC-8'::text, CURRENT_TIMESTAMP), 'YYYY-MM-dd HH24:MI:SS'::text) not null
);

-- DROP TABLE IF EXISTS invite_log;
-- create table invite_log (

-- );

-- INSERT INTO users (tg_id, amount) VALUES (6065246277, 100);
-- INSERT INTO users (tg_id, amount) VALUES (5882928568, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000000, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000001, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000002, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000003, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000004, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000005, 100);
-- INSERT INTO users (tg_id, amount) VALUES (6000000006, 100);


/*-----------------------------------------------------------------------------
发包
返回值{code: 0, orderId: 0, msg: ''}
code 0成功，1余额不足，2其他错误
-----------------------------------------------------------------------------*/
CREATE OR REPLACE FUNCTION create_order(tguserid bigint, tgusername text, pack int, boom int, subpacks numeric(10,2)[]) RETURNS json AS $$
DECLARE
  userId bigint;
  userAmount numeric(10, 2);

  result json;
  orderId bigint;
  subpack numeric;
  isboom boolean;

  tmpstr text;
BEGIN

  -- 余额不足
  select id, amount into userId, userAmount from users where tg_id = tguserid;
  IF userAmount < pack THEN
    result := json_build_object('code', 1);
    RETURN result;
  END IF;

  -- 1、扣余额
  update users set amount = amount - pack where id = userId;
  -- 2、创建订单
  insert into orders(user_id, pack, boom, sub_packs, tg_name) values (userId, pack, boom, subpacks, tgusername) RETURNING id INTO orderId;
  -- 3、创建子订单
  FOREACH subpack IN ARRAY subpacks
  LOOP
    tmpstr := to_char(subpack, 'FM9999999990.00');
    tmpstr := substr(tmpstr, length(tmpstr));
    IF tmpstr = boom::text THEN
      isboom := TRUE;
    ELSE
      isboom := FALSE;
    END IF;
    insert into order_details(order_id, sub_pack, boom) values (orderId, subpack, isboom);
  END LOOP;

  result := json_build_object('code', 0, 'orderId', orderId);
  RETURN result;

EXCEPTION
  WHEN OTHERS THEN
    return json_build_object('code', 2);
END;
$$ LANGUAGE plpgsql;


/*-----------------------------------------------------------------------------
抢包
返回值{code: 0, joinCount: 0, msg: ''}
code 0成功，-1其他错误，1余额不足，2无法重复参与，3订单已完成，4无法参与自己的订单
joinCount 已参与人数
-----------------------------------------------------------------------------*/
CREATE OR REPLACE FUNCTION get_pack(oid bigint, tgid bigint, tgname text) RETURNS json AS $$
DECLARE
  userId bigint;
  userAmount numeric(10, 2);
  orderPack int;
  orderBoom int;
  orderUserId bigint;
  orderStatus int;
  tmpCount int;

  orderDetailId bigint;
  orderDetailSubPack numeric(10, 2);
  orderDetailBoom boolean;
  settlement numeric(10, 2);

  resultDetails json;
  exception_detail text;
BEGIN

  select pack, boom, user_id, status into orderPack, orderBoom, orderUserId, orderStatus from orders where id = oid;
  select id, sub_pack, boom into orderDetailId, orderDetailSubPack, orderDetailBoom from order_details where order_id = oid and user_id is null order by random() limit 1;
  IF orderStatus <> 0 OR orderDetailId IS NULL THEN
    RAISE EXCEPTION SQLSTATE 'P0003' USING MESSAGE = '订单已完成';
  END IF;

  select id, amount into userId, userAmount from users where tg_id = tgid;
  IF userId = orderUserId THEN
    RAISE EXCEPTION SQLSTATE 'P0004' USING MESSAGE = '无法参与自己的订单';
  END IF;

  select count(1) into tmpCount from order_details where order_id = oid and user_id = userId;
  IF tmpCount > 0 THEN
    RAISE EXCEPTION SQLSTATE 'P0002' USING MESSAGE = '无法重复参与';
  END IF;
  
  IF (orderPack * 1.8) > userAmount  THEN
    RAISE EXCEPTION SQLSTATE 'P0001' USING MESSAGE = '余额不足，至少需要余额' || to_char(orderPack * 1.8, 'FM9999999990.00') || 'U';
  END IF;

  --关联订单详情
  update order_details set user_id = userId, tg_id = tgid, tg_name = tgname where id = orderDetailId;
  IF orderDetailBoom THEN --中雷
    --玩家扣减
    update users set amount = amount - orderPack * 1.8 + orderDetailSubPack where id = userId;
    --包主增加
    update users set amount = amount + orderPack * 1.8 where id = orderUserId;
  ELSE
    --玩家增加
    update users set amount = amount + orderDetailSubPack where id = userId;
  END IF;

  --如果是最后一个则，更新订单状态
  select count(1) into tmpCount from order_details where order_id = oid and user_id is null;
  IF orderDetailBoom THEN
    settlement := orderDetailSubPack - (orderPack * 1.8);
  ELSE
    settlement := orderDetailSubPack;
  END IF;
  IF tmpCount = 0 THEN
    update orders set status = 1 where id = oid;
    SELECT json_agg(json_build_object('subpack', sub_pack, 'boom', boom, 'tgid', tg_id, 'tgname', tg_name)) INTO resultDetails FROM order_details where order_id = oid;
    RETURN json_build_object('code', 0, 'done', true, 'isBoom', orderDetailBoom, 'orderBoom', orderBoom, 'pack', orderPack, 'subpack', orderDetailSubPack, 'progress', 6-tmpCount, 'settlement', settlement, 'orderDetails', resultDetails);
  ELSE
    RETURN json_build_object('code', 0, 'done', false, 'isBoom', orderDetailBoom, 'orderBoom', orderBoom, 'pack', orderPack, 'subpack', orderDetailSubPack, 'progress', 6-tmpCount, 'settlement', settlement);
  END IF;
EXCEPTION
  WHEN SQLSTATE 'P0001' THEN
    GET STACKED DIAGNOSTICS exception_detail = MESSAGE_TEXT;
    RETURN json_build_object('code', 1, 'msg', exception_detail);
  WHEN SQLSTATE 'P0002' THEN
    GET STACKED DIAGNOSTICS exception_detail = MESSAGE_TEXT;
    RETURN json_build_object('code', 2, 'msg', exception_detail);
  WHEN SQLSTATE 'P0003' THEN
    GET STACKED DIAGNOSTICS exception_detail = MESSAGE_TEXT;
    RETURN json_build_object('code', 3, 'msg', exception_detail);
  WHEN SQLSTATE 'P0004' THEN
    GET STACKED DIAGNOSTICS exception_detail = MESSAGE_TEXT;
    RETURN json_build_object('code', 4, 'msg', exception_detail);
  WHEN OTHERS THEN
    GET STACKED DIAGNOSTICS exception_detail = MESSAGE_TEXT;
    RETURN json_build_object('code', -1, 'msg', exception_detail);
END;
$$ LANGUAGE plpgsql;

